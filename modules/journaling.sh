#!/usr/bin/env bash

# Journaling module for Obsidian Starter Kit installer

source "$(dirname "${BASH_SOURCE[0]}")/utils.sh"

# Setup journaling functionality
setup_journaling() {
    if [[ "$journaling_enabled" != "true" ]]; then
        return
    fi
    
    print_status "Setting up journaling functionality..."
    
    local vault_path="$1"
    create_journaling_moc "$vault_path"
    create_journal_aggregation_script "$vault_path"
}

# Create journaling MOC file
create_journaling_moc() {
    local vault_path="$1"
    local permanent_dir="$vault_path/300_Permanent"
    local filepath="$permanent_dir/0-Journaling.md"
    
    print_status "Creating journaling MOC file..."
    
    # Create the journaling dashboard with monthly reviews section
    cat > "$filepath" << 'EOF'
# Monthly Reviews

# Current Year

# Previous Years

EOF
    
    print_success "Created: $filepath"
}

# Create journal aggregation script
create_journal_aggregation_script() {
    local vault_path="$1"
    local scripts_dir="${vault_name}_scripts"
    local script_path="$scripts_dir/journal_aggregation.sh"
    
    print_status "Creating journal aggregation script: $script_path"
    
    # Create the script
    cat > "$script_path" << EOF
#!/usr/bin/env bash

# Journal aggregation script for Obsidian vault
# Generated by Obsidian Starter Kit installer
# Creates monthly review files and aggregates daily journal entries

set -e

# Variables
VAULT_PATH="$vault_path"
PERMANENT_DIR="\$VAULT_PATH/300_Permanent"
ROUTINES_DIR="\$VAULT_PATH/900_Routines"
JOURNALING_MOC="\$PERMANENT_DIR/0-Journaling.md"

# Date variables
TODAY=\$(date +%Y-%m-%d)
CURRENT_YEAR=\$(date +%Y)
CURRENT_MONTH=\$(date +%B)
DAY_OF_MONTH=\$(date +%d)

echo "Running journal aggregation for \$TODAY..."

# Check if it's the first of the month to create new monthly review file
if [[ "\$DAY_OF_MONTH" == "01" ]]; then
    echo "First of the month detected - creating monthly review file..."
    
    MONTHLY_FILE="\$PERMANENT_DIR/\${CURRENT_YEAR}-\${CURRENT_MONTH}-Review.md"
    
    if [[ ! -f "\$MONTHLY_FILE" ]]; then
        cat > "\$MONTHLY_FILE" << 'MONTHLY_EOF'

Associated MOCs or files: [[0-Journaling]]

---

# \$CURRENT_MONTH \$CURRENT_YEAR Review

# Journal Entries

MONTHLY_EOF
        echo "Created monthly review file: \$MONTHLY_FILE"
        
        # Update the journaling MOC to include link to new monthly file
        # Check if the year section exists, if not add it
        if ! grep -q "# \$CURRENT_YEAR" "\$JOURNALING_MOC"; then
            # Add year section under "# Current Year"
            sed -i "/# Current Year/a\\\\n# \$CURRENT_YEAR\\n" "\$JOURNALING_MOC"
        fi
        
        # Add link to monthly review if it doesn't exist
        if ! grep -q "\$CURRENT_YEAR-\$CURRENT_MONTH-Review" "\$JOURNALING_MOC"; then
            sed -i "/# \$CURRENT_YEAR/a\\- [[\$CURRENT_YEAR-\$CURRENT_MONTH-Review]]" "\$JOURNALING_MOC"
        fi
        
        echo "Updated journaling MOC with new monthly review link"
    else
        echo "Monthly review file already exists: \$MONTHLY_FILE"
    fi
fi

# Process daily journal entries
echo "Scanning for journal entries in daily notes..."

# Find all daily note files in the routines directory
if [[ -d "\$ROUTINES_DIR" ]]; then
    # Look for files that might contain journal entries
    while IFS= read -r -d '' daily_file; do
        # Extract date from filename (assuming YYYY-MM-DD.md format)
        filename=\$(basename "\$daily_file" .md)
        
        # Skip if filename doesn't match date pattern
        if [[ ! \$filename =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}\$ ]]; then
            continue
        fi
        
        file_year=\$(echo "\$filename" | cut -d'-' -f1)
        file_month_num=\$(echo "\$filename" | cut -d'-' -f2)
        file_day=\$(echo "\$filename" | cut -d'-' -f3)
        
        # Convert month number to month name
        file_month=\$(date -d "\$file_year-\$file_month_num-01" +%B)
        
        # Determine the monthly review file for this entry
        monthly_review_file="\$PERMANENT_DIR/\${file_year}-\${file_month}-Review.md"
        
        # Skip if monthly review file doesn't exist yet
        if [[ ! -f "\$monthly_review_file" ]]; then
            continue
        fi
        
        # Extract journal content from daily file
        journal_content=""
        
        # Look for lines containing "notes:", "journal:", or "diary:"
        while IFS= read -r line; do
            if [[ \$line =~ ^[[:space:]]*([Nn]otes|[Jj]ournal|[Dd]iary):[[:space:]]*(.+)\$ ]]; then
                field_content="\${BASH_REMATCH[2]}"
                if [[ -n "\$field_content" ]]; then
                    if [[ -n "\$journal_content" ]]; then
                        journal_content="\$journal_content\\n"
                    fi
                    journal_content="\$journal_content- \$field_content"
                fi
            fi
        done < "\$daily_file"
        
        # If we found journal content, add it to the monthly review
        if [[ -n "\$journal_content" ]]; then
            # Check if this day already has an entry in the monthly review
            day_header="# \$filename"
            
            if ! grep -q "^\$day_header\$" "\$monthly_review_file"; then
                # Add the day's journal entries
                echo "" >> "\$monthly_review_file"
                echo "\$day_header" >> "\$monthly_review_file"
                echo "" >> "\$monthly_review_file"
                echo -e "\$journal_content" >> "\$monthly_review_file"
                
                echo "Added journal entries for \$filename to \$monthly_review_file"
            fi
        fi
        
    done < <(find "\$ROUTINES_DIR" -name "*.md" -type f -print0)
else
    echo "Routines directory not found: \$ROUTINES_DIR"
fi

echo "Journal aggregation completed successfully"
EOF

    # Make script executable
    chmod +x "$script_path"
    
    print_success "Created executable journal aggregation script: $script_path"
    
    # Create crontab instruction for journal aggregation
    create_journal_crontab_instructions "$scripts_dir"
}

# Create crontab setup instructions for journal aggregation
create_journal_crontab_instructions() {
    local scripts_dir="$1"
    local crontab_file="$scripts_dir/setup_journal_crontab.md"
    
    cat > "$crontab_file" << EOF
# Journal Aggregation Crontab Setup

To automatically run your journal aggregation script daily, add it to your crontab:

# 1. Open crontab editor:
\`\`\`bash
crontab -e
\`\`\`

# 2. Add this line to run daily at 11:59 PM:
\`\`\`
59 23 * * * $(pwd)/$scripts_dir/journal_aggregation.sh
\`\`\`

# 3. Alternative times:
- Run at 9:00 PM: \`0 21 * * * $(pwd)/$scripts_dir/journal_aggregation.sh\`
- Run at 6:00 AM: \`0 6 * * * $(pwd)/$scripts_dir/journal_aggregation.sh\`

# What the script does:
- **First of month**: Creates new monthly review file (YYYY-Month-Review.md)
- **Daily**: Scans all daily notes for "notes:", "journal:", or "diary:" fields
- **Daily**: Aggregates journal entries into appropriate monthly review files

# Manual execution:
You can also run the script manually anytime:
\`\`\`bash
$(pwd)/$scripts_dir/journal_aggregation.sh
\`\`\`

# Notes:
- The script looks for daily note files in 900_Routines/ directory
- Only processes files with YYYY-MM-DD.md naming format
- Automatically updates the journaling MOC file with new monthly reviews
EOF
    
    print_success "Created journal crontab instructions: $crontab_file"
}

# Show journaling setup summary
show_journaling_summary() {
    if [[ "$journaling_enabled" != "true" ]]; then
        return
    fi
    
    echo
    print_status "Journaling integration enabled with MOC and aggregation script created."
    print_status "Journal aggregation script: ${vault_name}_scripts/journal_aggregation.sh"
    print_status "Crontab instructions: ${vault_name}_scripts/setup_journal_crontab.md"
}