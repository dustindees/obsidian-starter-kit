#!/usr/bin/env bash

# Script builder module for Obsidian Starter Kit installer
# Creates automated daily note construction scripts

source "$(dirname "${BASH_SOURCE[0]}")/utils.sh"

# Setup automation script builder (called from daily_notes.sh after all setup)
setup_script_builder() {
    if [[ "$daily_notes_enabled" != "true" ]]; then
        return
    fi
    
    print_status "Creating daily automation script..."
    
    local vault_path="$1"
    create_daily_automation_script "$vault_path"
}

# Get user's preferred routine order (called from menu.sh)
get_routine_order() {
    if [[ ${#routine_categories[@]} -eq 0 ]]; then
        print_warning "No routine categories found. Skipping routine ordering."
        return
    fi
    
    echo
    print_status "Configure your daily routine order"
    print_status "Available routine categories: ${routine_categories[*]}"
    echo
    
    # Create array of routine categories with "Morning" and "Night" suggestions
    local available_routines=("${routine_categories[@]}")
    declare -ga ordered_routines=()
    
    # Suggest Morning first if it exists
    if [[ " ${available_routines[*]} " =~ " Morning " ]]; then
        print_status "Suggestion: Start with 'Morning' routine"
    fi
    
    # Suggest Night last if it exists  
    if [[ " ${available_routines[*]} " =~ " Night " ]]; then
        print_status "Suggestion: End with 'Night' routine"
    fi
    
    echo
    print_status "Select routine order using fzf (press TAB to select, ENTER when done):"
    
    # Use fzf to let user select order
    while [[ ${#available_routines[@]} -gt 0 ]]; do
        local remaining_count=${#available_routines[@]}
        if [[ $remaining_count -eq 1 ]]; then
            # Last routine, add it automatically
            ordered_routines+=("${available_routines[0]}")
            break
        fi
        
        local prompt="Select routine #$((${#ordered_routines[@]} + 1)) (${remaining_count} remaining):"
        local selected_routine
        selected_routine=$(printf '%s\n' "${available_routines[@]}" | fzf --prompt="$prompt " --height=10)
        
        if [[ -n "$selected_routine" ]]; then
            ordered_routines+=("$selected_routine")
            
            # Remove selected routine from available list
            local temp_array=()
            for routine in "${available_routines[@]}"; do
                if [[ "$routine" != "$selected_routine" ]]; then
                    temp_array+=("$routine")
                fi
            done
            available_routines=("${temp_array[@]}")
            
            print_success "Added: $selected_routine (position ${#ordered_routines[@]})"
        else
            print_error "No routine selected. Please try again."
            return 1
        fi
    done
    
    echo
    print_success "Final routine order: ${ordered_routines[*]}"
}

# Create the daily automation script
create_daily_automation_script() {
    local vault_path="$1"
    local scripts_dir="${vault_name}_scripts"
    local script_path="$scripts_dir/daily_automation.sh"
    
    print_status "Creating daily automation script: $script_path"
    
    # Create the script header
    cat > "$script_path" << 'EOF'
#!/usr/bin/env bash

# Daily automation script for Obsidian vault
# Generated by Obsidian Starter Kit installer
# This script constructs daily notes from user-defined routine templates

set -e

# Variables
EOF

    # Add vault-specific variables
    cat >> "$script_path" << EOF
VAULT_PATH="$vault_path"
VAULT_NAME="$vault_name"
AUTOMATION_DIR="\$VAULT_PATH/997_Automation"
DAILY_NOTES_DIR="\$VAULT_PATH/900_Routines/Daily_Notes"
TEMP_FILE="/tmp/daily_note_builder.md"

# Date variables
TODAY=\$(date +%Y-%m-%d)
YESTERDAY=\$(date --date="yesterday" +%Y-%m-%d)
TOMORROW=\$(date --date="next day" +%Y-%m-%d)
DAY_OF_WEEK=\$(date +"%u")
DAY_OF_MONTH=\$(date +"%d")

# Ensure directories exist
mkdir -p "\$DAILY_NOTES_DIR"

# Start building today's note
echo "Building daily note for \$TODAY..."

# Initialize temp file with metadata and navigation
cat > "\$TEMP_FILE" << 'HEADER'

---
tags:
---

# Daily Note - \$TODAY

<button type='button' id='render'>[[\$YESTERDAY | Yesterday]]</button>
<button type='button' id='render'>[[\$TOMORROW | Tomorrow]]</button>

HEADER

EOF

    # Add routine sections based on user order
    if [[ ${#ordered_routines[@]} -gt 0 ]]; then
        echo "# Add routine sections in user-specified order" >> "$script_path"
        
        for routine in "${ordered_routines[@]}"; do
            local routine_file
            routine_file="${routine// /_}"
            cat >> "$script_path" << EOF

# $routine routine
if [[ -f "\$AUTOMATION_DIR/${routine_file}_Daily.md" ]]; then
    echo "" >> "\$TEMP_FILE"
    echo "# $routine" >> "\$TEMP_FILE"
    cat "\$AUTOMATION_DIR/${routine_file}_Daily.md" >> "\$TEMP_FILE"
    echo "" >> "\$TEMP_FILE"
else
    echo "Warning: ${routine_file}_Daily.md not found, skipping $routine routine"
fi
EOF
        done
    fi

    # Add recurring tasks handling if enabled
    if [[ ${#recurring_routine_frequencies[@]} -gt 0 ]]; then
        cat >> "$script_path" << 'EOF'

# Add recurring tasks based on frequency
echo "" >> "$TEMP_FILE"
echo "# Recurring Tasks" >> "$TEMP_FILE"

EOF
        
        for frequency in "${recurring_routine_frequencies[@]}"; do
            case "$frequency" in
                "Weekly")
                    cat >> "$script_path" << 'EOF'
# Weekly tasks (every Saturday)
if [[ $DAY_OF_WEEK -eq 6 ]]; then
    if [[ -f "$AUTOMATION_DIR/Recurring_Tasks_Weekly.md" ]]; then
        echo "## Weekly Tasks" >> "$TEMP_FILE"
        cat "$AUTOMATION_DIR/Recurring_Tasks_Weekly.md" >> "$TEMP_FILE"
    fi
fi

EOF
                    ;;
                "Monthly")
                    cat >> "$script_path" << 'EOF'
# Monthly tasks (first day of month)
if [[ $DAY_OF_MONTH -eq 1 ]]; then
    if [[ -f "$AUTOMATION_DIR/Recurring_Tasks_Monthly.md" ]]; then
        echo "## Monthly Tasks" >> "$TEMP_FILE"
        cat "$AUTOMATION_DIR/Recurring_Tasks_Monthly.md" >> "$TEMP_FILE"
    fi
fi

EOF
                    ;;
                "Quarterly")
                    cat >> "$script_path" << 'EOF'
# Quarterly tasks (first day of quarter)
MONTH=$(date +%m)
if [[ $DAY_OF_MONTH -eq 1 ]] && [[ $((MONTH % 3)) -eq 1 ]]; then
    if [[ -f "$AUTOMATION_DIR/Recurring_Tasks_Quarterly.md" ]]; then
        echo "## Quarterly Tasks" >> "$TEMP_FILE"
        cat "$AUTOMATION_DIR/Recurring_Tasks_Quarterly.md" >> "$TEMP_FILE"
    fi
fi

EOF
                    ;;
                "Biannually")
                    cat >> "$script_path" << 'EOF'
# Biannual tasks (January 1st and July 1st)
MONTH=$(date +%m)
if [[ $DAY_OF_MONTH -eq 1 ]] && [[ $MONTH -eq 1 || $MONTH -eq 7 ]]; then
    if [[ -f "$AUTOMATION_DIR/Recurring_Tasks_Biannually.md" ]]; then
        echo "## Biannual Tasks" >> "$TEMP_FILE"
        cat "$AUTOMATION_DIR/Recurring_Tasks_Biannually.md" >> "$TEMP_FILE"
    fi
fi

EOF
                    ;;
                "Annually")
                    cat >> "$script_path" << 'EOF'
# Annual tasks (January 1st)
if [[ $(date +%j) -eq 1 ]]; then
    if [[ -f "$AUTOMATION_DIR/Recurring_Tasks_Annually.md" ]]; then
        echo "## Annual Tasks" >> "$TEMP_FILE"
        cat "$AUTOMATION_DIR/Recurring_Tasks_Annually.md" >> "$TEMP_FILE"
    fi
fi

EOF
                    ;;
            esac
        done
    fi

    # Add script footer
    cat >> "$script_path" << 'EOF'

# Add quick capture section
echo "" >> "$TEMP_FILE"
echo "# Quick Capture" >> "$TEMP_FILE"
echo "" >> "$TEMP_FILE"

# Copy temp file to final location
cp "$TEMP_FILE" "$DAILY_NOTES_DIR/$TODAY.md"

# Clean up
rm -f "$TEMP_FILE"

echo "Daily note created: $DAILY_NOTES_DIR/$TODAY.md"
EOF

    # Make script executable
    chmod +x "$script_path"
    
    print_success "Created executable daily automation script: $script_path"
    
    # Create crontab instruction file
    create_crontab_instructions "$scripts_dir"
}

# Create crontab setup instructions
create_crontab_instructions() {
    local scripts_dir="$1"
    local crontab_file="$scripts_dir/setup_crontab.md"
    
    cat > "$crontab_file" << EOF
# Crontab Setup Instructions

To automatically run your daily automation script, add it to your crontab:

## 1. Open crontab editor:
\`\`\`bash
crontab -e
\`\`\`

## 2. Add this line to run daily at 6:00 AM:
\`\`\`
0 6 * * * $(pwd)/$scripts_dir/daily_automation.sh
\`\`\`

## 3. Alternative times:
- Run at 8:00 AM: \`0 8 * * * $(pwd)/$scripts_dir/daily_automation.sh\`
- Run at midnight: \`0 0 * * * $(pwd)/$scripts_dir/daily_automation.sh\`

## 4. To check your current crontab:
\`\`\`bash
crontab -l
\`\`\`

## Manual execution:
You can also run the script manually anytime:
\`\`\`bash
$(pwd)/$scripts_dir/daily_automation.sh
\`\`\`
EOF
    
    print_success "Created crontab instructions: $crontab_file"
}

# Show script builder summary
show_script_builder_summary() {
    if [[ "$daily_notes_enabled" != "true" ]]; then
        return
    fi
    
    echo
    print_status "Daily automation script created!"
    print_status "Script location: ${vault_name}_scripts/daily_automation.sh"
    print_status "Crontab instructions: ${vault_name}_scripts/setup_crontab.md"
    
    if [[ ${#ordered_routines[@]} -gt 0 ]]; then
        echo
        print_status "Daily routine order: ${ordered_routines[*]}"
    fi
}