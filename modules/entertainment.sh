#!/usr/bin/env bash

# Entertainment module for Obsidian Starter Kit installer

source "$(dirname "${BASH_SOURCE[0]}")/utils.sh"

# Setup entertainment functionality
setup_entertainment() {
    if [[ "$entertainment_enabled" != "true" ]]; then
        return
    fi
    
    print_status "Setting up entertainment functionality..."
    
    local vault_path="$1"
    create_entertainment_moc "$vault_path"
    create_entertainment_lists "$vault_path"
    create_entertainment_aggregation_script "$vault_path"
}

# Create entertainment MOC file
create_entertainment_moc() {
    local vault_path="$1"
    local permanent_dir="$vault_path/300_Permanent"
    local filepath="$permanent_dir/0-Entertainment.md"
    
    print_status "Creating entertainment MOC file..."
    
    # Create the dashboard with On Deck and Lists sections
    cat > "$filepath" << 'EOF'
# On Deck


# Lists

EOF

    # Add links to each category list file
    for category in "${entertainment_categories[@]}"; do
        local filename
        filename="${category// /_}"
        echo "- [[$filename" "_List]]" >> "$filepath"
    done
    
    print_success "Created: $filepath"
}

# Create entertainment category list files
create_entertainment_lists() {
    local vault_path="$1"
    local permanent_dir="$vault_path/300_Permanent"
    
    print_status "Creating entertainment list files..."
    
    for category in "${entertainment_categories[@]}"; do
        local filename
        filename="${category// /_}"
        local filepath="$permanent_dir/${filename}_List.md"
        
        # Create the file with the template content
        cat > "$filepath" << EOF
Associated MOCs: [[0-Entertainment]]

---

# On Deck 


# Ongoing


# TODO 


# Completed 2025


EOF
        
        print_success "Created: $filepath"
    done
}

# Create entertainment aggregation script
create_entertainment_aggregation_script() {
    local vault_path="$1"
    local scripts_dir="${vault_name}_scripts"
    local script_path="$scripts_dir/entertainment_aggregation.sh"
    
    print_status "Creating entertainment aggregation script: $script_path"
    
    # Create the script
    cat > "$script_path" << EOF
#!/usr/bin/env bash

# Entertainment aggregation script for Obsidian vault
# Generated by Obsidian Starter Kit installer
# Aggregates "On Deck" items from category files to main dashboard

set -e

# Variables
VAULT_PATH="$vault_path"
PERMANENT_DIR="\$VAULT_PATH/300_Permanent"
ENTERTAINMENT_MOC="\$PERMANENT_DIR/0-Entertainment.md"
TEMP_FILE="/tmp/entertainment_aggregation.md"

# Categories to process
CATEGORIES=($(printf '"%s" ' "${entertainment_categories[@]}"))

echo "Aggregating entertainment On Deck items..."

# Start building the updated MOC file
echo "# On Deck" > "\$TEMP_FILE"
echo "" >> "\$TEMP_FILE"

# Process each category
for category in "\${CATEGORIES[@]}"; do
    filename="\${category// /_}"
    category_file="\$PERMANENT_DIR/\${filename}_List.md"
    
    if [[ -f "\$category_file" ]]; then
        # Extract content between "# On Deck" and next header
        on_deck_content=\$(awk '/^# On Deck/,/^# / {
            if (/^# On Deck/) next
            if (/^# / && !/^# On Deck/) exit
            print
        }' "\$category_file" | sed '/^\s*$/d')
        
        # Only add section if there's content
        if [[ -n "\$on_deck_content" ]]; then
            echo "## [[\${filename}_List|\$category]]" >> "\$TEMP_FILE"
            echo "\$on_deck_content" >> "\$TEMP_FILE"
            echo "" >> "\$TEMP_FILE"
        fi
    else
        echo "Warning: \$category_file not found, skipping \$category"
    fi
done

# Add the Lists section from the original file
echo "# Lists" >> "\$TEMP_FILE"
echo "" >> "\$TEMP_FILE"
awk '/^# Lists/,EOF {
    if (/^# Lists/) next
    print
}' "\$ENTERTAINMENT_MOC" >> "\$TEMP_FILE"

# Replace the original file
cp "\$TEMP_FILE" "\$ENTERTAINMENT_MOC"

# Clean up
rm -f "\$TEMP_FILE"

echo "Entertainment dashboard updated: \$ENTERTAINMENT_MOC"
EOF

    # Make script executable
    chmod +x "$script_path"
    
    print_success "Created executable entertainment aggregation script: $script_path"
}

# Show entertainment setup summary
show_entertainment_summary() {
    if [[ "$entertainment_enabled" != "true" ]]; then
        return
    fi
    
    echo
    print_status "Entertainment integration enabled with MOC and list files created."
    print_status "Entertainment aggregation script: ${vault_name}_scripts/entertainment_aggregation.sh"
}